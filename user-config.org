#+TITLE: User Config
#+AUTHOR: Jan Ro√übach
#+property: header-args:elisp :tangle ~/.config/spacemacsconf/user-config.el
#+STARTUP: overview

* Keybinds
  This section defines some custom Keybinds for sapcemacs.

** Bookmarks
This sets the SPC RET Binding to my Bookmarks similar to the Doom Emacs binding.
#+begin_src emacs-lisp :tangle yes
  (spacemacs/set-leader-keys "RET" 'bookmark-jump)
  (spacemacs/set-leader-keys "ob" 'spacemacs/bm-transient-state/body)
  (spacemacs/set-leader-keys "om" 'bm-toggle)
  (spacemacs/set-leader-keys "om" 'bm-toggle)
  (spacemacs/set-leader-keys "on" 'bm-next)
  (spacemacs/set-leader-keys "op" 'bm-previous)
  (spacemacs/set-leader-keys "oc" 'bm-remove-all-all-buffers)
#+end_src

** Python
#+begin_src emacs-lisp :tangle yes
  (spacemacs/set-leader-keys-for-major-mode 'python-mode "se" 'python-shell-send-statement)
#+end_src

** Org Brain alternative keys
  #+begin_src emacs-lisp :tangle yes
    (define-key org-brain-visualize-mode-map "i" 'link-hint-open-link)
    (spacemacs/set-leader-keys "oo" 'org-brain-agenda)
    (spacemacs/set-leader-keys "oA" 'org-brain-archive)
    (spacemacs/set-leader-keys "o:" 'org-brain-set-tags)
    (spacemacs/set-leader-keys "or" 'org-brain-refile)
  #+end_src

  #+RESULTS:


* Org Mode
** Capture
   This defines the [[https://orgmode.org/manual/Capture-templates.html#Capture-templates][Capture Templates]] for my config. Some are in hardcoded files, so be careful.
  #+begin_src emacs-lisp :tangle yes
    (setq org-capture-templates
          '(("t" "Todo" entry (file+headline "~/Dropbox/Org/brain/agenda.org" "Tasklist")
             "** TODO %?\n  %i\n")
            ("j" "Journal" entry (file+olp+datetree "~/Dropbox/Org/brain/journal.org")
             "* %?\nEntered on %U\n  %i\n")
            ("p" "Project" entry (file+headline "~/Dropbox/Org/brain/agenda.org" "Projects")
             "** %?\n %i\n")
            ("n" "Note" entry (file "~/Dropbox/Org/brain/inbox.org")
             "* %i")
            ("a" "Anki")
            ("ad" "Deep Learning" entry (file+headline "~/Dropbox/Org/brain/anki.org" "Deep Learning")
             (file "~/Dropbox/Org/templates/ankiTemplate.org"))
            ("am" "Model Checking" entry (file+headline "~/Dropbox/Org/brain/anki.org" "Model Checking")
             (file "~/Dropbox/Org/templates/ankiTemplate.org"))
            ("aa" "Approximative Algorithmen" entry (file+headline "~/Dropbox/Org/brain/anki.org" "Approximative Algorithmen")
             (file "~/Dropbox/Org/templates/ankiTemplate.org"))))
  #+end_src
** Notifications
  #+begin_src emacs-lisp :tangle yes
    (setq org-wild-notifier--day-wide-events t)
  #+end_src

** Babel
  This defines the languages that babel should load in order to evaluate src blocks.
#+begin_src emacs-lisp :tangle yes
  (setq org-confirm-babel-evaluate nil)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '( (java  . t)
      (python  . t)
      (shell . t)
      (gnuplot . t)
      (clojure . t)
      (emacs-lisp . t)
      ))

  (setq org-babel-clojure-backend 'cider)
#+end_src

** ref
   First we configure where the files can be found.
#+begin_src emacs-lisp :tangle yes
  (setq org-ref-default-bibliography '("~/Dropbox/School/Papers/references.bib")
        org-ref-pdf-directory "~/Dropbox/School/Papers/"
        org-ref-bibliography-notes "~/Dropbox/School/Papers/notes.org")
#+end_src
   This sets the pdf open process to use zathura.
#+begin_src emacs-lisp :tangle yes
  (setq org-ref-open-pdf-function
        (lambda (fpath)
          (start-process "zathura" "*helm-bibtex-zathura*" "/usr/bin/zathura" fpath)))
#+end_src

** Org brain
   This enables getting to my Org brain files from any org document.
#+begin_src emacs-lisp :tangle yes
  (add-hook 'before-save-hook #'org-brain-ensure-ids-in-buffer)
#+end_src

** Agenda
*** TODO-SEQ
   Setting the keyword Sequenze for todo keywords.
#+begin_src emacs-lisp :tangle yes
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "WAITING(w@)" "|" "DONE(d!)" "CANCELLED(c@)" "DEFERRED(f@)")))
#+end_src
*** Agenda files
   #+begin_src emacs-lisp :tangle yes
   (setq org-agenda-files '("~/Dropbox/Org/brain"))
   #+end_src

*** Archive
    Set the archive Location globally to the current archive.
   #+begin_src emacs-lisp :tangle yes
     ;;(setq org-archive-location "~/Dropbox/archive/myarchive.org")
   #+end_src
*** Inbox
    Lets first define a custom function to get to the inbox quickly from anywhere and bind it to
    a spacemacs user command.
   #+begin_src emacs-lisp :tangle yes
     (setq gtd/inbox-file-path "~/Dropbox/Org/brain/inbox.org")

     (defun go-to-inbox-buffer ()
       (interactive)
       (find-file gtd/inbox-file-path))

     (spacemacs/set-leader-keys "oi" 'go-to-inbox-buffer)
   #+end_src
*** Super agenda

    Here I set my GTD view with the help of the org-super-agenda package.

   #+begin_src emacs-lisp :tangle yes
     (setq spacemacs-theme-org-agenda-height nil
           org-agenda-time-grid '((daily today require-timed) (800 1000 1200 1400 1600 1900 2000) "......." "----------------------")
           org-agenda-skip-scheduled-if-done t
           org-agenda-skip-deadline-if-done t
           org-agenda-include-deadlines t
           org-agenda-include-diary t
           org-agenda-block-separator nil
           org-agenda-compact-blocks t
           org-agenda-start-with-log-mode t)

     (setq org-agenda-custom-commands
           '(("o" "GTD View"
              ((agenda "" ((org-agenda-span 'day)
                           (org-super-agenda-groups
                            '((:name "Today"
                                     :time-grid t
                                     :date today
                                     :todo "TODAY"
                                     :scheduled today
                                     :order 1)))))
               (alltodo "" ((org-agenda-overriding-header "")
                            (org-super-agenda-groups
                             '((:name "Next to do"
                                      :todo "NEXT"
                                      :order 1)
                               (:name "Done"
                                      :todo "DONE"
                                      :order 3)
                               (:name "Important"
                                      :tag "Important"
                                      :priority "A"
                                      :order 6)
                               (:name "Due Today"
                                      :deadline today
                                      :order 2)
                               (:name "Due Soon"
                                      :deadline future
                                      :order 8)
                               (:name "Overdue"
                                      :deadline past
                                      :order 7)
                               (:name "Assignments"
                                      :tag "Assignment"
                                      :order 10)
                               (:name "Issues"
                                      :tag "Issue"
                                      :order 12)
                               (:name "Projects"
                                      :tag "Project"
                                      :order 14)
                               (:name "Emacs"
                                      :tag "Emacs"
                                      :order 13)
                               (:name "Research"
                                      :tag "Research"
                                      :order 15)
                               (:name "To read"
                                      :tag "Read"
                                      :order 30)
                               (:name "Waiting"
                                      :todo "WAITING"
                                      :order 20)
                               (:name "trivial"
                                      :priority<= "C"
                                      :tag ("Trivial" "Unimportant")
                                      :todo ("SOMEDAY" )
                                      :order 90)
                               (:discard (:tag ("Chore" "Routine" "Daily")))))))))))
   (org-super-agenda-mode 1)
   #+end_src

** Projects
   Projectile has some functionality to capture todos for the current project in an Org file. It is stored by default in a file called TODOS.org in the project root.
   This Code here is to add these files to the Org Agenda.
#+BEGIN_SRC emacs-lisp :tangle yes
  (with-eval-after-load 'org-agenda
    (require 'org-projectile)
    (mapcar '(lambda (file)
                   (when (file-exists-p file)
                     (push file org-agenda-files)))
            (org-projectile-todo-files)))
#+END_SRC

* Auto Complete
** Company

#+begin_src emacs-lisp :tangle yes
  (setq-default dotspacemacs-configuration-layers
    '((auto-completion :variables
                      auto-completion-enable-help-tooltip t)))
  (setq-default dotspacemacs-configuration-layers
                '((auto-completion :variables
                                   auto-completion-enable-snippets-in-popup t)))

  (setq-default dotspacemacs-configuration-layers '(
    (auto-completion :variables
                     auto-completion-return-key-behavior 'complete
                     auto-completion-tab-key-behavior 'cycle
                     auto-completion-complete-with-key-sequence nil
                     auto-completion-complete-with-key-sequence-delay 0.1
                     auto-completion-private-snippets-directory nil)
                     ))
#+end_src
* Spell Check
 #+begin_src emacs-lisp
  (setq-default dotspacemacs-configuration-layers
    '((spell-checking :variables spell-checking-enable-auto-dictionary t)))
 #+end_src
* Misc
  In this section, there are various little adjustments to same packages that do not warrent a specific section.

** Tabs
  Turn on tab mode by default and set the new tab choice to the home buffer.
 #+begin_src emacs-lisp :tangle yes
   ;; (tab-bar-mode 1)
   ;; (setq tab-bar-new-tab-choice "*spacemacs*")
 #+end_src

** Neotree

#+begin_src emacs-lisp :tangle yes
  (setq neo-theme 'icons)
  (setq neo-window-position 'right)
#+end_src

** Openwith
   The openwith package provides support for what file types should be opended with which programs.
   I am mostly happy with the defaults, but I want to view pdfs with zathura.
#+begin_src emacs-lisp :tangle yes
  (openwith-mode t)
  (setq openwith-associations '(("\\.pdf\\'" "zathura" (file))))
#+end_src
** Emacs comp-native
   This setting disables the constant compiler warnings in the emacs-native-comp version of emacs.
#+begin_src emacs-lisp :tangle yes
  ;;(setq comp-async-report-warnings-errors nil)
#+end_src
** Transparency
   Enables/Disables transparency at startup. Use the spacemacs/toggle-transparency to change it afterwards.
#+begin_src emacs-lisp :tangle yes
  ;; (spacemacs/enable-transparency)
#+end_src
** Popper
#+begin_src emacs-lisp :tangle yes
  ;; (setq popper-reference-buffers
  ;;      '("\\*Messages\\*"
  ;;        "\\*Warnings\\*"
  ;;         "Output\\*"
  ;;         help-mode
  ;;         messeges-mode
  ;;         compilation-mode))
  ;; ;(setq popper-group-function #'popper-group-by-projectile)
  ;; (global-set-key (kbd "C-√ü") 'popper-toggle-latest)
  ;; (global-set-key (kbd "M-√ü") 'popper-cycle)
  ;; (spacemacs/set-leader-keys "wpt" 'popper-toggle-type)
  ;; (spacemacs/set-leader-keys "wpc" 'popper-cycle)
  ;; (spacemacs/set-leader-keys "wpl" 'popper-toggle-latest)
#+end_src
** Doom Modeline
  #+begin_src emacs-lisp :tangle yes
   (doom-modeline-mode 1)
  #+end_src
