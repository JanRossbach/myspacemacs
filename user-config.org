#+TITLE: User Config
#+AUTHOR: Jan Ro√übach
#+property: header-args:elisp :tangle ~/.config/spacemacsconf/user-config.el
#+STARTUP: overview

#+begin_src emacs-lisp :tangle yes
;; -*- lexical-binding: t; -*-
#+end_src

* Keybinds
  This section defines some custom Keybinds for sapcemacs.

** Bookmarks
This sets the SPC RET Binding to my Bookmarks similar to the Doom Emacs binding.
#+begin_src emacs-lisp :tangle yes
(spacemacs/set-leader-keys "RET" 'bookmark-jump)
(spacemacs/set-leader-keys "ob" 'spacemacs/bm-transient-state/body)
(spacemacs/set-leader-keys "om" 'bm-toggle)
(spacemacs/set-leader-keys "om" 'bm-toggle)
(spacemacs/set-leader-keys "on" 'bm-next)
(spacemacs/set-leader-keys "op" 'bm-previous)
(spacemacs/set-leader-keys "oc" 'bm-remove-all-all-buffers)
#+end_src

** Python
#+begin_src emacs-lisp :tangle yes
  (spacemacs/set-leader-keys-for-major-mode 'python-mode "se" 'python-shell-send-statement)
#+end_src

** Org
#+begin_src emacs-lisp :tangle yes
  (defun my-org-agenda-call () (interactive) (org-agenda nil "o"))
  (spacemacs/set-leader-keys "oa" 'my-org-agenda-call)
#+end_src

#+RESULTS:

* Org Mode
** Capture
   This defines the [[https://orgmode.org/manual/Capture-templates.html#Capture-templates][Capture Templates]] for my config. Some are in hardcoded files, so be careful.
  #+begin_src emacs-lisp :tangle yes
    (setq org-capture-templates
          '(("t" "Todo" entry (file+headline "~/Dropbox/Org/agenda.org" "Tasklist")
             "** TODO %?\n  %i\n")
            ("j" "Journal" entry (file+olp+datetree "~/Dropbox/Org/journal.org")
             "* %?\nEntered on %U\n  %i\n")
            ("p" "Project" entry (file+headline "~/Dropbox/Org/agenda.org" "Projects")
             "** %?\n %i\n")
            ("n" "Note" entry (file "~/Dropbox/Org/roam/inbox.org")
             "* %i")
            ("a" "Anki")
            ("ad" "Deep Learning" entry (file+headline "~/Dropbox/Org/anki.org" "Deep Learning")
             (file "~/Dropbox/Org/templates/ankiTemplate.org"))
            ("am" "Model Checking" entry (file+headline "~/Dropbox/Org/anki.org" "Model Checking")
             (file "~/Dropbox/Org/templates/ankiTemplate.org"))
            ("aa" "Approximative Algorithmen" entry (file+headline "~/Dropbox/Org/anki.org" "Approximative Algorithmen")
             (file "~/Dropbox/Org/templates/ankiTemplate.org"))))
  #+end_src
** Notifications
  #+begin_src emacs-lisp :tangle yes
;;    (setq org-wild-notifier--day-wide-events t)
  #+end_src

** Babel
  This defines the languages that babel should load in order to evaluate src blocks.
#+begin_src emacs-lisp :tangle yes
  (setq org-confirm-babel-evaluate nil)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '( (java  . t)
      (python  . t)
      (shell . t)
      (gnuplot . t)
      (clojure . t)
      (emacs-lisp . t)
      ))

  (setq org-babel-clojure-backend 'cider)
#+end_src

** ref
   First we configure where the files can be found.
#+begin_src emacs-lisp :tangle yes
  (setq bibtex-completion-bibliography '("~/Dropbox/Org/Research/Bachelorarbeit/Papers/refs.bib")
        bibtex-completion-library-path "~/Dropbox/Org/Research/Bachelorarbeit/Papers/"
        bibtex-completion-notes-path "~/Dropbox/Org/Research/Bachelorarbeit/Papers/notes.org")
#+end_src

This sets the pdf open process to use zathura.
#+begin_src emacs-lisp :tangle yes
  (setq org-ref-open-pdf-function
        (lambda (fpath)
          (start-process "zathura" "*helm-bibtex-zathura*" "/usr/bin/zathura" fpath)))
#+end_src

In Order to make sure that bibtex is called on our latex file when compiling it to pdf, we add the bibtex command into the list
of pdflatex commands that are run on the file. Otherwise citations are not going to work properly.

#+begin_src emacs-lisp :tangle yes
  (setq org-latex-pdf-process
        '("pdflatex -interaction nonstopmode -output-directory %o %f"
          "bibtex %b"
          "pdflatex -interaction nonstopmode -output-directory %o %f"
          "pdflatex -interaction nonstopmode -output-directory %o %f"))
#+end_src

** Roam

Setting up the home directory for org roam and turning on completion of Nodes.
#+begin_src emacs-lisp :tangle yes
  (setq org-roam-directory (file-truename "~/Dropbox/Org/roam/"))
  (setq org-roam-completion-everywhere t)
#+end_src

Org roam uses custom capture templates. Let's set them here. The semantics are similar to regular Org capture templates.

#+begin_src emacs-lisp :tangle yes
  (setq org-roam-capture-templates '(("d" "default" plain "%?" :target
                                      (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}"))
                                      ("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
                                       :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: Project")
                                       :unnarrowed t)
                                      ("e" "entry-point" plain "* Topic\n\n%?\n\n"
                                       :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: EntryPoint")
                                       :unnarrowed t)
                                      ("i" "inbox" plain "* %?"
                                       :if-new (file+head "inbox.org" "#+title: Inbox\n"))))
#+end_src

Then we define some custom functions. Org roam is a lot easier to hack on and customize than Org Brain because it is simpler out of the box.

#+begin_src emacs-lisp :tangle yes
  (defun org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (cons arg args))
          (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                    '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))
#+end_src

#+begin_src emacs-lisp :tangle yes
  (defun my/org-roam-filter-by-tag (tag-name)
    (lambda (node)
      (member tag-name (org-roam-node-tags node))))

  (defun my/org-roam-list-notes-by-tag (tag-name)
    (mapcar #'org-roam-node-file
            (seq-filter
             (my/org-roam-filter-by-tag tag-name)
             (org-roam-node-list))))

  (defun my/org-roam-refresh-agenda-list ()
    (interactive)
    (setq org-agenda-files (my/org-roam-list-notes-by-tag "Project")))
  ;; Build the agenda list the first time for the session
  ;;(my/org-roam-refresh-agenda-list)
#+end_src


#+begin_src emacs-lisp :tangle yes
  (defun my/org-roam-project-finalize-hook ()
    "Adds the captured project file to `org-agenda-files' if the
  capture was not aborted."
    ;; Remove the hook since it was added temporarily
    (remove-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Add project file to the agenda list if the capture was confirmed
    (unless org-note-abort
      (with-current-buffer (org-capture-get :buffer)
        (add-to-list 'org-agenda-files (buffer-file-name)))))

  (defun my/org-roam-find-project ()
    (interactive)
    ;; Add the project file to the agenda after capture is finished
    (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Select a project file to open, creating it if necessary
    (org-roam-node-find
     nil
     nil
     (my/org-roam-filter-by-tag "Project")
     :templates
     '(("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: Project")
        :unnarrowed t))))
#+end_src

#+begin_src emacs-lisp :tangle yes
  (defun my/org-roam-capture-task ()
    (interactive)
    ;; Add the project file to the agenda after capture is finished
    (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Capture the new task, creating the project file if necessary
    (org-roam-capture- :node (org-roam-node-read
                              nil
                              (my/org-roam-filter-by-tag "Project"))
                       :templates '(("p" "project" plain "** TODO %?"
                                     :if-new (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org"
                                                            "#+title: ${title}\n#+category: ${title}\n#+filetags: Project"
                                                            ("Tasks"))))))
#+end_src

#+begin_src emacs-lisp :tangle yes
  (defun my/org-roam-find-entry-point()
    (interactive)
    (org-roam-node-find
     nil
     nil
     (my/org-roam-filter-by-tag "EntryPoint")
     :templates
     '(("e" "entry-point" plain "* Topic\n\n%?\n\n"
       :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: EntryPoint")
       :unnarrowed t))))
#+end_src

#+begin_src emacs-lisp :tangle yes
  (defun my/org-roam-capture-inbox ()
    (interactive)
    (org-roam-capture- :node (org-roam-node-create)
                       :templates '(("i" "inbox" plain "* %?"
                                    :if-new (file+head "inbox.org" "#+title: Inbox\n")))))
#+end_src

Now we have all the functions we will need for the setup.
Let's now set up the hotkeys in the major mode to use our newly created Functions.
#+begin_src emacs-lisp :tangle yes
  (spacemacs/set-leader-keys-for-major-mode 'org-mode "re" 'my/org-roam-find-entry-point)
  (spacemacs/set-leader-keys-for-major-mode 'org-mode "rb" 'my/org-roam-capture-inbox)
  (spacemacs/set-leader-keys-for-major-mode 'org-mode "rp" 'my/org-roam-find-project)
  (spacemacs/set-leader-keys-for-major-mode 'org-mode "rI" 'org-roam-node-insert-immediate)
  (spacemacs/set-leader-keys-for-major-mode 'org-mode "rn" 'org-id-get-create)
  (spacemacs/set-leader-keys-for-major-mode 'org-mode "rT" 'my/org-roam-capture-task)
  (spacemacs/set-leader-keys "ot" 'org-roam-dailies-goto-today)
  (spacemacs/set-leader-keys "oT" 'org-roam-dailies-goto-tomorrow)
  (spacemacs/set-leader-keys "of" 'org-roam-node-find)
#+end_src

** Agenda
*** TODO-SEQ
   Setting the keyword Sequenze for todo keywords.
#+begin_src emacs-lisp :tangle yes
  (setq org-todo-keywords
        '((sequence "TODO(t)" "DOING(n)" "WAITING(w@)" "|" "DONE(d!)" "CANCELLED(c@)" "DEFERRED(f@)")))
#+end_src

*** Drawer
#+begin_src emacs-lisp :tangle yes
(setq org-log-into-drawer t)
#+end_src

*** Archive
    Set the archive Location globally to the current archive.
   #+begin_src emacs-lisp :tangle yes
     (setq org-archive-location "~/Dropbox/archive/myarchive.org")
   #+end_src
*** Inbox
    Lets first define a custom function to get to the inbox quickly from anywhere and bind it to
    a spacemacs user command.
   #+begin_src emacs-lisp :tangle yes
     (setq gtd/inbox-file-path "~/Dropbox/Org/roam/inbox.org")

     (defun go-to-inbox-buffer ()
       (interactive)
       (find-file gtd/inbox-file-path))

     (spacemacs/set-leader-keys "oi" 'go-to-inbox-buffer)
   #+end_src
*** Files

Here is a Place to hard code some files we want to have in the agenda in addition to the ones added automatically.
#+begin_src emacs-lisp :tangle yes
  ;; (setq org-agenda-files '("/home/jan/Dropbox/Org/roam/"
  ;;                          "/home/jan/Dropbox/Org/journals/"))
  (setq org-agenda-files nil) ;; Reset the agenda files to override local variables if present
  (push "/home/jan/Dropbox/Org/roam/" org-agenda-files)
  (push "/home/jan/Dropbox/Org/roam/journals/" org-agenda-files)
#+end_src

*** Super agenda

    Here I set my GTD view with the help of the org-super-agenda package.

   #+begin_src emacs-lisp :tangle yes
     (setq spacemacs-theme-org-agenda-height nil
           org-agenda-time-grid '((daily today require-timed) (800 1000 1200 1400 1600 1900 2000) "......." "----------------------")
           org-agenda-skip-scheduled-if-done t
           org-agenda-skip-deadline-if-done t
           org-agenda-include-deadlines t
           org-agenda-include-diary t
           org-agenda-block-separator nil
           org-agenda-compact-blocks t
           org-agenda-start-with-log-mode t)

     (setq org-agenda-custom-commands
           '(("o" "GTD View"
              ((agenda "" ((org-agenda-span 'day)
                           (org-super-agenda-groups
                            '((:name "Today"
                                     :time-grid t
                                     :date today
                                     :todo "TODAY"
                                     :scheduled today
                                     :order 1)))))
               (alltodo "" ((org-agenda-overriding-header "")
                            (org-super-agenda-groups
                             '((:name "Next to do"
                                      :todo "NEXT"
                                      :order 1)
                               (:name "Done"
                                      :todo "DONE"
                                      :order 3)
                               (:name "Important"
                                      :tag "Important"
                                      :priority "A"
                                      :order 6)
                               (:name "Due Today"
                                      :deadline today
                                      :order 2)
                               (:name "Due Soon"
                                      :deadline future
                                      :order 8)
                               (:name "Overdue"
                                      :deadline past
                                      :order 7)
                               (:name "Assignments"
                                      :tag "Assignment"
                                      :order 10)
                               (:name "Issues"
                                      :tag "Issue"
                                      :order 12)
                               (:name "Projects"
                                      :tag "Project"
                                      :order 14)
                               (:name "Emacs"
                                      :tag "Emacs"
                                      :order 13)
                               (:name "Research"
                                      :tag "Research"
                                      :order 15)
                               (:name "To read"
                                      :tag "Read"
                                      :order 30)
                               (:name "Waiting"
                                      :todo "WAITING"
                                      :order 20)
                               (:name "trivial"
                                      :priority<= "C"
                                      :tag ("Trivial" "Unimportant")
                                      :todo ("SOMEDAY" )
                                      :order 90)
                               (:discard (:tag ("Chore" "Routine" "Daily")))))))))))
   (org-super-agenda-mode 1)
   #+end_src

** Projects
   Projectile has some functionality to capture todos for the current project in an Org file. It is stored by default in a file called TODOS.org in the project root.
   This Code here is to add these files to the Org Agenda.
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (with-eval-after-load 'org-agenda
  ;;   (require 'org-projectile)
  ;;   (mapcar #'(lambda (file)
  ;;                  (when (file-exists-p file)
  ;;                    (push file org-agenda-files)))
  ;;           (org-projectile-todo-files)))
  ;; (with-eval-after-load 'org-agenda
  ;;   (require 'org-projectile)
  ;;   (push (org-projectile:todo-files) org-agenda-files))
#+END_SRC

** Drill

#+begin_src emacs-lisp :tangle yes
  (spacemacs/set-leader-keys "od" 'org-drill)
  (spacemacs/set-leader-keys "or" 'org-drill-resume)
  (setq org-drill-scope 'agenda)
  ;;(setq org-drill-scope 'file)
  (setq org-drill-question-tag "card")
#+end_src

** Clock

#+begin_src emacs-lisp :tangle yes
  (setq org-clock-in-switch-to-state "DOING")
  (setq org-clock-out-switch-to-state "TODO")
  (setq org-clock-out-remove-zero-time-clocks t)
#+end_src

* Misc
  In this section, there are various little adjustments to same packages that do not warrent a specific section.

** Neotree

#+begin_src emacs-lisp :tangle yes
  (setq neo-theme 'icons)
  (setq neo-window-position 'right)
#+end_src

#+begin_src emacs-lisp :tangle yes
(setf (lsp-session-folders-blacklist (lsp-session)) nil)
(lsp--persist-session (lsp-session))
#+end_src

** Openwith
   The openwith package provides support for what file types should be opended with which programs.
   I am mostly happy with the defaults, but I want to view pdfs with zathura.
#+begin_src emacs-lisp :tangle yes
  (openwith-mode t)
  (setq openwith-associations '(("\\.pdf\\'" "zathura" (file))))
#+end_src
** Transparency
   Enables/Disables transparency at startup. Use the spacemacs/toggle-transparency to change it afterwards.
#+begin_src emacs-lisp :tangle yes
  (spacemacs/enable-transparency)
  (add-hook 'after-make-frame-functions 'spacemacs/enable-transparency)
#+end_src

** evil-Better-jumper
This variable prevents the C-i hotkey to behave like Tab in the gui version of emacs.
#+begin_src emacs-lisp :tangle yes
 (setq dotspacemacs-distinguish-gui-tab t)
#+end_src

** langtool
#+begin_src emacs-lisp :tangle yes
  (setq langtool-language-tool-jar "/home/jan/langtool/LanguageTool-5.7-SNAPSHOT/languagetool-commandline.jar")
  (setq langtool-default-language "en-US")
#+end_src

** Cider
#+begin_src emacs-lisp :tangle yes
(setq cider-clojure-cli-global-options "-A:dev")
#+end_src

** Pomodoro
#+begin_src emacs-lisp :tangle yes
  (setq org-pomodoro-manual-break t)
#+end_src

#+begin_src elisp :tangle yes
 ;; (setq org-export-latex-listings 'minted)
 ;; (setq org-export-latex-custom-lang-environments
 ;;       '(
 ;;         (emacs-lisp "common-lispcode")
 ;;         ))
 ;; (setq org-export-latex-minted-options
 ;;       '(("frame" "lines")
 ;;         ("fontsize" "\\scriptsize")
 ;;         ("linenos" "")))
 ;; (setq org-latex-to-pdf-process
 ;;   '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
 ;;     "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
 ;;     "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+end_src
